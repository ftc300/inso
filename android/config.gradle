ext {
    androidConfig = [
            applicationId    : 'com.inso.watch',
            appName          : 'inso',
            compileSdkVersion: 27,
            minSdkVersion    : 18,
            targetSdkVersion : 27,
            versionCode      : 1,
            versionName      : '1.0.0'// E.g. 1.9.72 => 1,009,072
    ]

    versionConfig = [
            // plugin
            gradle    : '3.2.1',
            // lib
            support   : '27.1.1',
            constraint: '1.1.3',
            leakcanary: '1.5.4',
            butterknife:'9.0.0-rc1'
    ]
    depConfig = [
            gradle              : "com.android.tools.build:gradle:$versionConfig.gradle",
            butterknife_gradle  : "com.jakewharton:butterknife-gradle-plugin:$versionConfig.butterknife",
            kotlin_gradle_plugin: "org.jetbrains.kotlin:kotlin-gradle-plugin:$versionConfig.kotlin",

            support             : [
                    appcompat_v7: "com.android.support:appcompat-v7:$versionConfig.support",
                    design      : "com.android.support:design:$versionConfig.support",
            ],
            constraint          : "com.android.support.constraint:constraint-layout:$versionConfig.constraint",
            leakcanary          : [
                    android      : "com.squareup.leakcanary:leakcanary-android:$versionConfig.leakcanary",
                    android_no_op: "com.squareup.leakcanary:leakcanary-android-no-op:$versionConfig.leakcanary",
            ],
            xiaomi_auth              : "com.xiaomi.account:oauth-android:latest.release",
            butterknife: "com.jakewharton:butterknife:$versionConfig.butterknife",
            butterknife_annotationProcessor :"com.jakewharton:butterknife-compiler:$versionConfig.butterknife",
            reactnative : "com.facebook.react:react-native:+",
            bottom_navigation_bar:"com.ashokvarma.android:bottom-navigation-bar:2.1.0",
            eventbus:'org.greenrobot:eventbus:3.1.1',
            recyclerview: 'com.android.support:recyclerview-v7:$versionConfig.support',
            statusbarcompat: 'com.githang:status-bar-compat:0.7',
            tinypinyin: 'com.github.promeg:tinypinyin:1.0.0',
            permission: 'com.yanzhenjie:permission:2.0.0-rc12',
            scanner: 'no.nordicsemi.android.support.v18:scanner:1.0.0',
            okhttp: 'com.squareup.okhttp3:okhttp:3.3.1',
            gson:'com.google.code.gson:gson:2.7',
            picasso: 'com.squareup.picasso:picasso:2.71828',
            volley: 'com.mcxiaoke.volley:library:1.0.19',
            skeleton: 'com.ethanhua:skeleton:1.1.2',
            shimmerlayout: 'io.supercharge:shimmerlayout:2.1.0',
            cardview: "com.android.support:cardview-v7:$versionConfig.support",
            hashids: 'org.hashids:hashids:1.0.3'
    ]


    configAndroidDomain = this.&configAndroidDomain
    configApkName = this.&configApkName
    configSigning = this.&configSigning
    configAppDependencies = this.&configAppDependencies
    configCommonLibDependencies = this.&configCommonLibDependencies
    configPhoneLibDependencies = this.&configPhoneLibDependencies
    config3rdLibDependencies = this.&config3rdLibDependencies
    configBaselibDependencies = this.&configBaselibDependencies
    configCommonUIDependencies = this.&configCommonUIDependencies
    configBleLibDependencies = this.&configBleLibDependencies
}

def configAndroidDomain(Project pro) {
    if (pro.plugins.hasPlugin("com.android.application")) {
        configAppAndroidDomain(pro)
    } else {
        configLibAndroidDomain(pro)
    }
}


def configSigning(Project pro) {
    File signPropertiesFile = file('sign/keystore.properties')
    if (!signPropertiesFile.exists()) return
    pro.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile file(properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }
}

def configApkName(Project pro) {
    pro.android.applicationVariants.all { variant ->
        if (variant.buildType.name != "debug") {
            variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk")
            variant.getPackageApplication().outputScope.apkDatas.forEach { apkData ->
                apkData.outputFileName = "inso_" + variant.versionName.replace(".", "_") + ".apk"
            }
        }
    }
}

//todo:common app is okï¼Œrn is special. Not used.
def configAppAndroidDomain(Project pro) {
    configSigning(pro)
    configApkName(pro)
    pro.android {
        compileSdkVersion androidConfig.compileSdkVersion
        defaultConfig {
            applicationId androidConfig.applicationId
            minSdkVersion androidConfig.minSdkVersion
            targetSdkVersion androidConfig.targetSdkVersion
            versionCode androidConfig.versionCode
            versionName androidConfig.versionName
        }

        buildTypes {
            release {
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                lintOptions {
                    checkReleaseBuilds false
                    abortOnError false
                }
            }
        }

        sourceSets {
            main.res.srcDirs += 'src/main/res_core'
            main.res.srcDirs += 'src/main/res_sub'
        }

        lintOptions {
            abortOnError false
        }
    }
}


def configLibAndroidDomain(Project pro) {
    pro.android {
        apply plugin: 'com.jakewharton.butterknife'
        compileSdkVersion androidConfig.compileSdkVersion
        defaultConfig {
            minSdkVersion androidConfig.minSdkVersion
            versionCode androidConfig.versionCode
            versionName androidConfig.versionName
        }
        buildTypes {
            release {
                minifyEnabled false
                consumerProguardFiles 'proguard-rules.pro'
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }

        lintOptions {
            abortOnError false
        }

        testOptions.unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }
}

def configAppDependencies(Project pro) {
    pro.dependencies {
        implementation fileTree(include: ['*.jar'], dir: 'app/libs')
        implementation project(':commonlib')
        implementation project(':phonelib')
        implementation project(':3rdlib')
        implementation project(':baselib')
        implementation project(':common_ui')
        implementation project(':blelib')
        implementation depConfig.support.appcompat_v7
        implementation depConfig.support.design
        implementation depConfig.support.design
        implementation depConfig.constraint
        implementation depConfig.xiaomi_auth
        debugImplementation depConfig.leakcanary.android
        releaseImplementation depConfig.leakcanary.android_no_op
        implementation depConfig.butterknife
        annotationProcessor depConfig.butterknife_annotationProcessor
        implementation depConfig.reactnative
        implementation depConfig.bottom_navigation_bar
        implementation depConfig.eventbus
        implementation depConfig.statusbarcompat
        implementation depConfig.tinypinyin
        implementation depConfig.permission
        implementation depConfig.scanner
        implementation depConfig.gson
        implementation depConfig.okhttp
        implementation depConfig.picasso
        implementation depConfig.volley
        implementation depConfig.shimmerlayout
        implementation depConfig.skeleton
        implementation depConfig.cardview
        implementation depConfig.hashids
    }
}

def configCommonLibDependencies(Project pro) {
    pro.dependencies {
        compileOnly depConfig.support.appcompat_v7
        compileOnly depConfig.support.design
    }
}

def config3rdLibDependencies(Project pro) {
    pro.dependencies {
        compileOnly depConfig.support.appcompat_v7
        compileOnly depConfig.support.design
        implementation project(':commonlib')
    }
}

def configBaselibDependencies(Project pro) {
    pro.dependencies {
        compileOnly depConfig.support.appcompat_v7
        compileOnly depConfig.support.design
        implementation depConfig.eventbus
        implementation depConfig.gson
        implementation depConfig.okhttp
        implementation depConfig.recyclerview
        implementation depConfig.butterknife
        implementation depConfig.statusbarcompat
        annotationProcessor depConfig.butterknife_annotationProcessor
        implementation project(':commonlib')
        implementation project(':common_ui')
    }
}

def configPhoneLibDependencies(Project pro) {
    pro.dependencies {
        implementation project(':commonlib')
        compileOnly depConfig.support.appcompat_v7
        compileOnly depConfig.support.design
    }
}
def configCommonUIDependencies(Project pro) {
    pro.dependencies {
    }
}
def configBleLibDependencies(Project pro) {
    pro.dependencies {
    }
}